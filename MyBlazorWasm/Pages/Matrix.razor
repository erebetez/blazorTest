@page "/matrix"

<PageTitle>Matrix</PageTitle>

<h1>Matrix</h1>

<div>
    <p>Width: @_width</p>
    <p>Height: @_height</p>
    <p>Pixel canvas: @_pixelCount</p>
    <p>Pixel count: @_pixelList.Count</p>
    <button class="btn btn-primary" @onclick="_Rainbow">Rainbow</button>
    <button class="btn btn-primary" @onclick="_Dot">Dot</button>
    <button class="btn btn-primary" @onclick="_Randomize">Randomize</button>
    <button class="btn btn-primary" @onclick="_Stop">Stop</button>
</div>

<hr />

<div style = "position: relative;
              width: @_WidthPx();
              height: @_HeightPx();
              border: 3px solid hsl(200, 100%, 20%);">
    
    @foreach(Pixel pixel in _pixelList) {
        //Console.WriteLine("pixel is: {0}", @pixel);
        <PixelWidget Pixel = "@pixel"/>
    }

</div>

<hr />

@code {

    private List<Pixel> _pixelList = new();

    private const int _width = 600;
    private const int _height = 300;

    private const int _pixelSize = 10; // TODO duble deffinition, see css file.

    private const int _pixelCount = (_height / _pixelSize) * (_width / _pixelSize);

    private bool _isRunning = false;

    private string _WidthPx(){
        return $"{_width + 6}px";
    }

    private string _HeightPx(){
        return $"{_height + 6}px";
    }

    private void _Rainbow(){
        for(int i = 0; i < _pixelCount; i++){
            _pixelList.Add(new Pixel{Color = $"hsl({i % 360}, 100%, 50%)",
                                     X = i * _pixelSize % _width,
                                     Y = i * _pixelSize / _width * _pixelSize});
        }
    }

    private void _Dot(){
        _pixelList.Add(new Pixel{Color = $"hsl(0, 100%, 30%)",
                            X = _width / 2,
                            Y = _height / 2});
    }

    private void _Randomize(){
        _pixelList = PixelRandom.Randomize(_pixelList, _width, _height, _pixelSize);
    }

    private void _Stop(){
        _isRunning = false;
        _pixelList.Clear();
    }

}
